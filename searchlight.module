<?php

include_once('searchlight.features.inc');
include_once('includes/SearchlightDatasource.inc');
include_once('includes/SearchlightEnvironment.inc');

/**
 * Implementation of hook_menu().
 */
function searchlight_menu() {
  $items = array();
  $items['admin/settings/search/datasource'] = array(
    'title' => 'Datasource',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_datasource'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => module_exists('search') ? MENU_LOCAL_TASK : MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/search/datasource/list/%searchlight_datasource'] = array(
    'title' => 'Datasource',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_datasource_edit', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_CALLBACK,
    'weight' => -10,
  );
  $items['admin/settings/search/datasource/list/%searchlight_datasource/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_datasource_edit', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/search/datasource/list/%searchlight_datasource/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_confirm', 'searchlight_datasource', 5, 'revert'),
    'access callback' => 'searchlight_task_access',
    'access arguments' => array(5, 'delete'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/search/datasource/list/%searchlight_datasource/revert'] = array(
    'title' => 'Revert',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_confirm', 'searchlight_datasource', 5, 'revert'),
    'access callback' => 'searchlight_task_access',
    'access arguments' => array(5, 'revert'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/search/datasource/ahah/%/%'] = array(
    'page callback' => 'searchlight_admin_datasource_ahah',
    'page arguments' => array(5, 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/search/environment'] = array(
    'title' => 'Environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_environment'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/settings/search/environment/list/%searchlight_environment'] = array(
    'title' => 'Environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_environment_edit', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_CALLBACK,
    'weight' => -10,
  );
  $items['admin/settings/search/environment/list/%searchlight_environment/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_environment_edit', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/search/environment/list/%searchlight_environment/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_confirm', 'searchlight_environment', 5, 'revert'),
    'access callback' => 'searchlight_task_access',
    'access arguments' => array(5, 'delete'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/search/environment/list/%searchlight_environment/revert'] = array(
    'title' => 'Revert',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_confirm', 'searchlight_environment', 5, 'revert'),
    'access callback' => 'searchlight_task_access',
    'access arguments' => array(5, 'revert'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/settings/search/backend'] = array(
    'title' => 'Backend',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchlight_admin_backend'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'searchlight.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function searchlight_menu_alter(&$items) {
  if (module_exists('search')) {
    $items['admin/settings/search/core'] = $items['admin/settings/search'];
    $items['admin/settings/search/core']['title'] = 'Core';
    $items['admin/settings/search/core']['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
  else {
    $items['admin/settings/search'] = $items['admin/settings/search/datasource'];
    $items['admin/settings/search']['title'] = 'Search';
    $items['admin/settings/search']['type'] = MENU_NORMAL_ITEM;
    unset($items['admin/settings/search']['weight']);
  }
}

/**
 * Implementation of hook_block().
 */
function searchlight_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op === 'list') {
    return array(
      'active' => array('info' => t('Active search')),
      'facets' => array('info' => t('Search facets')),
    );
  }
  else if ($op === 'view') {
    switch ($delta) {
      case 'active':
        $display = views_get_page_view();
        if ($display && !empty($display->view->query->searchlight)) {
          $output = '';
          $query = drupal_clone($display->view->query);
          // Render active facets
          foreach (searchlight_facets()->activeFacets($query->datasource) as $name => $field) {
            $id = searchlight_facets()->getFacet($name);
            $items = array($id => array('id' => $id, 'count' => $display->view->total_rows));
            if ($rendered = searchlight_facets()->render($query->datasource, $field, $items)) {
              $output .= theme('searchlight_facet', $rendered);
            }
          }
          return array('subject' => t('Active search (@count)', array('@count' => $display->view->total_rows)), 'content' => $output);
        }
        break;
      case 'facets':
        $display = views_get_page_view();
        if ($display && !empty($display->view->query->searchlight)) {
          $output = '';
          $query = drupal_clone($display->view->query);
          // Get fields that are enabled as facets and are inactive
          foreach (searchlight_facets()->inactiveFacets($query->datasource) as $name => $field) {
            $items = $query->backend->facetBuild($query, $field);
            if (!empty($items) && $rendered = searchlight_facets()->render($query->datasource, $field, $items)) {
              $output .= theme('searchlight_facet', $rendered);
            }
          }
          return array('subject' => t('Filter search'), 'content' => $output);
        }
        break;
    }
  }
}

/**
 * Implementation of hook_nodeapi()
 */
function searchlight_nodeapi($node, $op) {
  if ($op == 'insert') {
    db_query("INSERT INTO {searchlight_search} (type, id, status) VALUES ('node', %d, %d)", $node->nid, 0);
  }
  elseif ($op == 'update') {
    db_query("UPDATE {searchlight_search} SET status = 0 WHERE type='node' and id=%d", $node->nid);
  }
}

/**
 * Implementation of hook_purl_provider().
 */
function searchlight_purl_provider() {
  return array(
    'searchlight' => array(
      'name' => t('Searchlight facets'),
      'description' => t('Sets one or more active facets.'),
      'callback' => 'searchlight_facets_activate',
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function searchlight_theme() {
  return array(
    'searchlight_sphinx_conf' => array(
      'template' => 'searchlight-sphinx-conf',
      'arguments' => array('datasources' => array(), 'searchd' => array()),
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_solr_schema' => array(
      'template' => 'searchlight-solr-schema',
      'arguments' => array('datasource' => array()),
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_solr_config' => array(
      'template' => 'searchlight-solr-config',
      //'arguments' => array('datasource' => array()),
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_solr_cores' => array(
      'template' => 'searchlight-solr-cores',
      'arguments' => array('cores' => array()),
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_plugin_display_datasource' => array(
      'arguments' => array('form' => array()),
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_facet' => array(
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_facet_link' => array(
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_facet_active' => array(
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_admin_list' => array(
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
    'searchlight_admin_datasource_fields' => array(
      'arguments' => array('form' => array()),
      'path' => drupal_get_path('module', 'searchlight') . '/theme',
      'file' => 'searchlight.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function searchlight_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'searchlight') . '/views',
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function searchlight_ctools_plugin_api($module, $api) {
  if ($module === 'searchlight') {
    switch ($api) {
      case 'plugins':
        return array('version' => 1);
      case 'datasource':
        return array('version' => 1);
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 */
function searchlight_ctools_plugin_plugins() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE,
  );
}

/**
 * Implementation of hook_searchlight_plugins().
 * This is a CTools plugin API hook.
 */
function searchlight_searchlight_plugins() {
  return array(
    'SearchlightBackend' => array(
      'handler' => array(
        'path' => drupal_get_path('module', 'searchlight') .'/plugins',
        'file' => 'SearchlightBackend.inc',
        'class' => 'SearchlightBackend',
      ),
    ),
    'SearchlightBackendSphinx' => array(
      'handler' => array(
        'path' => drupal_get_path('module', 'searchlight') .'/plugins',
        'file' => 'SearchlightBackendSphinx.inc',
        'class' => 'SearchlightBackendSphinx',
        'parent' => 'SearchlightBackend',
      ),
    ),
    'SearchlightBackendSolr' => array(
      'handler' => array(
        'path' => drupal_get_path('module', 'searchlight') .'/plugins',
        'file' => 'SearchlightBackendSolr.inc',
        'class' => 'SearchlightBackendSolr',
        'parent' => 'SearchlightBackend',
      ),
    ),
  );
}

/**
 * Implementation of hook_searchlight_registry().
 */
function searchlight_searchlight_registry() {
  return array(
    'backend' => array(
      'sphinx' => array(
        'title' => t('Sphinx'),
        'plugin' => 'SearchlightBackendSphinx',
      ),
      'solr' => array(
        'title' => t('Solr'),
        'plugin' => 'SearchlightBackendSolr',
      ),
    ),
  );
}

/**
 * Implementation of hook_searchlight_node_access_realms_alter().
 * Provide realms for commonly used node_access modules.
 */
function searchlight_searchlight_node_access_realms_alter(&$realms) {
  // Standard node access realm.
  $realms['all'] = 'all';

  // OG access.
  if (module_exists('og_access')) {
    $realms['og_admin'] = 'og_admin';
    $realms['og_public'] = 'og_public';
    $realms['og_subscriber'] = 'og_subscriber';
  }
}

/**
 * Factory/singleton static cache for facets handler.
 */
function searchlight_facets($reset = FALSE) {
  static $facets;
  if (!isset($facets) || $reset) {
    module_load_include('inc', 'searchlight', 'searchlight.facets');
    $facets = new SearchlightFacets();
  }
  return $facets;
}

/**
 * PURL callback: parse and set active facets.
 */
function searchlight_facets_activate($packed) {
  $facets = searchlight_facets();
  foreach ($facets->unpack($packed) as $field => $value) {
    $facets->setFacet($field, $value);
  }
}

/**
 * Retrieves & caches the searchlight registry.
 */
function searchlight_registry($key = NULL, $reset = FALSE) {
  static $registry;
  if (!isset($registry) || $reset) {
    if (!$reset && $cache = cache_get('searchlight_registry')) {
      $registry = $cache->data;
    }
    else {
      $registry = module_invoke_all('searchlight_registry');
      drupal_alter('searchlight_registry', $registry);
      cache_set('searchlight_registry', $registry);
    }
  }
  if (isset($key)) {
    return isset($registry[$key]) ? $registry[$key] : array();
  }
  return $registry;
}

/**
 * Retrieve the current default backend.
 */
function searchlight_default_backend() {
  $backend = variable_get('searchlight_backend', 'sphinx');
  return searchlight_get_backend($backend);
}

/**
 * Retrieve an instance of a searchlight backend class.
 */
function searchlight_get_backend($backend = NULL, $reset = FALSE) {
  static $loaded;
  ctools_include('plugins');

  if (!isset($loaded[$backend]) || $reset) {
    $loaded[$backend] = FALSE;
    $backends = searchlight_registry('backend');
    if (isset($backends[$backend]) && $info = $backends[$backend]) {
      $plugins = ctools_get_plugins('searchlight', 'plugins');
      if (isset($plugins[$info['plugin']]) && $class = ctools_plugin_get_class($plugins[$info['plugin']], 'handler')) {
        $loaded[$backend] = new $class($backend);
      }
    }
  }
  return $loaded[$backend];
}

/**
 * Parse and build a view from a "$view_name:$view_display" string.
 */
function searchlight_build_view($identifier) {
  $split = explode(':', $identifier);
  if (count($split) === 2 && $view = views_get_view($split[0])) {
    $view->set_display($split[1]);
    $view->build();
    return $view;
  }
  return FALSE;
}

/**
 * Load & crud functions ==============================================
 */

/**
 * Create a new datasource object.
 */
function searchlight_datasource_new($name, $base_table) {
  ctools_include('export');
  $datasource = ctools_export_new_object('searchlight_datasource');
  $datasource->name = $name;
  $datasource->base_table = $base_table;
  return $datasource;
}

/**
 * Datasource loader.
 *
 * @param $name
 *   The name for this datasource.
 *
 * @return
 *   Returns a fully-loaded datasource.
 */
function searchlight_datasource_load($name = NULL, $reset = FALSE) {
  ctools_include('export');
  static $datasources;
  if (!isset($datasources) || $reset) {
    if ($reset) {
      ctools_export_load_object_reset('searchlight_datasource');
    }
    $datasources = ctools_export_load_object('searchlight_datasource', 'all');
  }
  if (isset($name)) {
    return isset($datasources[$name]) ? $datasources[$name] : FALSE;
  }
  return $datasources;
}

/**
 * Inserts or updates a datasource object into the database.
 *
 * @param $datasource
 *   The datasource object to be saved.
 *
 * @return
 *   Returns true on success, false on failure.
 */
function searchlight_datasource_save($datasource) {
  $existing = searchlight_datasource_load($datasource->name, TRUE);
  if ($existing && ($existing->export_type & EXPORT_IN_DATABASE)) {
    drupal_write_record('searchlight_datasource', $datasource, 'name');
  }
  else {
    drupal_write_record('searchlight_datasource', $datasource);
  }
  searchlight_datasource_load(NULL, TRUE);
  searchlight_invalidate_cache();
  return TRUE;
}

/**
 * Deletes an existing datasource.
 *
 * @param $datasource
 *   The datasource to be deleted.
 *
 * @return
 *   Returns true on success, false on failure.
 */
function searchlight_datasource_delete($datasource) {
  if (isset($datasource->name) && ($datasource->export_type & EXPORT_IN_DATABASE)) {
    db_query("DELETE FROM {searchlight_datasource} WHERE name = '%s'", $datasource->name);
    searchlight_invalidate_cache();
    return TRUE;
  }
  return FALSE;
}

/**
 * Create a new environment object.
 */
function searchlight_environment_new($name, $datasource) {
  ctools_include('export');
  $environment = ctools_export_new_object('searchlight_environment');
  $environment->name = $name;
  $environment->datasource = $datasource;
  return $environment;
}

/**
 * Datasource loader.
 *
 * @param $name
 *   The name for this environment.
 *
 * @return
 *   Returns a fully-loaded environment.
 */
function searchlight_environment_load($name = NULL, $reset = FALSE) {
  ctools_include('export');
  static $environments;
  if (!isset($environments) || $reset) {
    if ($reset) {
      ctools_export_load_object_reset('searchlight_environment');
    }
    $environments = ctools_export_load_object('searchlight_environment', 'all');
  }
  if (isset($name)) {
    return isset($environments[$name]) ? $environments[$name] : FALSE;
  }
  return $environments;
}

/**
 * Inserts or updates a environment object into the database.
 *
 * @param $environment
 *   The environment object to be saved.
 *
 * @return
 *   Returns true on success, false on failure.
 */
function searchlight_environment_save($environment) {
  $existing = searchlight_environment_load($environment->name, TRUE);
  if ($existing && ($existing->export_type & EXPORT_IN_DATABASE)) {
    drupal_write_record('searchlight_environment', $environment, 'name');
  }
  else {
    drupal_write_record('searchlight_environment', $environment);
  }
  searchlight_environment_load(NULL, TRUE);
  searchlight_invalidate_cache();
  return TRUE;
}

/**
 * Deletes an existing environment.
 *
 * @param $environment
 *   The environment to be deleted.
 *
 * @return
 *   Returns true on success, false on failure.
 */
function searchlight_environment_delete($environment) {
  if (isset($environment->name) && ($environment->export_type & EXPORT_IN_DATABASE)) {
    db_query("DELETE FROM {searchlight_environment} WHERE name = '%s'", $environment->name);
    searchlight_invalidate_cache();
    return TRUE;
  }
  return FALSE;
}

/**
 * Menu access callback for config object-related tasks.
 */
function searchlight_task_access($object, $op) {
  if (user_access('administer site configuration')) {
    switch ($op) {
      case 'revert':
        return ($object->export_type & EXPORT_IN_DATABASE) && ($object->export_type & EXPORT_IN_CODE);
      case 'delete':
        return ($object->export_type & EXPORT_IN_DATABASE) && !($object->export_type & EXPORT_IN_CODE);
      case 'disable':
        return empty($object->disabled);
      case 'enable':
        return !empty($object->disabled);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Retrieve full datasource information for a given base table.
 */
function searchlight_get_datasource($base_table) {
  $datasources = searchlight_datasource_load();
  foreach ($datasources as $datasource) {
    if ($datasource->base_table === $base_table) {
      return $datasource;
    }
  }
  return FALSE;

  static $datasources = array();
  $reset = TRUE;
  if (!isset($datasources[$base_table]) || $reset) {
    $cid = "searchlight_datasource_{$base_table}";
    if (!$reset && $cache = cache_get($cid)) {
      $datasources[$base_table] = $cache->data;
    }
    else {
      $datasources[$base_table] = array();
      $views = variable_get('searchlight_views', array());
      if (isset($views[$base_table]) && $view = searchlight_build_view($views[$base_table])) {
        $datasource = $view->execute_display();
        cache_set($cid, $datasource);
        $datasources[$base_table] = $datasource;
      }
    }
  }
  return !empty($datasources[$base_table]) ? $datasources[$base_table] : FALSE;
}

/**
 * Retrieve all views on the given base table that have the specified display.
 */
function searchlight_get_views_by_display($base_table, $display_plugin = 'searchlight_datasource') {
  $views = views_get_all_views();
  $usable = array();
  foreach ($views as $view) {
    if ($view->base_table === $base_table) {
      foreach ($view->display as $display) {
        if ($display->display_plugin === $display_plugin) {
          $usable[$view->name] = $view;
        }
      }
    }
  }
  return $usable;
}

/**
 * Invalidate cached data.
 */
function searchlight_invalidate_cache() {
  cache_clear_all('searchlight', 'cache', TRUE);
}
